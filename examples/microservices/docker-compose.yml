version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:latest
    container_name: api-gateway
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
      - "8443:8443"  # Proxy SSL
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/user-service
      - JWT_SECRET=your_jwt_secret_key_here
      - JWT_EXPIRATION=1d
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=user-service
      - KAFKA_GROUP_ID=user-service-group
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - kafka
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URI=mongodb://mongodb:27017/order-service
      - JWT_SECRET=your_jwt_secret_key_here
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=order-service
      - KAFKA_GROUP_ID=order-service-group
      - USER_SERVICE_URL=http://user-service:3001
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
    ports:
      - "3002:3002"
    depends_on:
      - mongodb
      - kafka
      - user-service
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGODB_URI=mongodb://mongodb:27017/product-service
      - JWT_SECRET=your_jwt_secret_key_here
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=product-service
      - KAFKA_GROUP_ID=product-service-group
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=5000000
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
    ports:
      - "3004:3004"
    volumes:
      - product_uploads:/app/uploads
    depends_on:
      - mongodb
      - kafka
      - user-service
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URI=mongodb://mongodb:27017/notification-service
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=notification-service
      - KAFKA_GROUP_ID=notification-service-group
      - EMAIL_HOST=smtp.example.com
      - EMAIL_PORT=587
      - EMAIL_USER=your_email@example.com
      - EMAIL_PASSWORD=your_email_password
      - EMAIL_FROM=no-reply@example.com
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token
      - TWILIO_PHONE_NUMBER=your_twilio_phone_number
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
    ports:
      - "3003:3003"
    depends_on:
      - mongodb
      - kafka
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-net
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Express (Web-based MongoDB admin interface)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - microservices-net

  # Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  mongodb_data:
  product_uploads: 