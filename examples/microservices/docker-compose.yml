version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:latest
    container_name: api-gateway
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
      - "8443:8443"  # Proxy SSL
      - "8444:8444"  # Admin API SSL
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml
    networks:
      - microservices-net

  # User Service (Node.js)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_CONNECTION=mongodb://mongo:27017/users
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3000:3000"
    depends_on:
      - mongo
      - kafka
    volumes:
      - ./user-service:/app
      - /app/node_modules
    networks:
      - microservices-net

  # Order Service (Go)
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - PORT=3001
      - DB_CONNECTION=postgresql://postgres:postgres@postgres:5432/orders
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - kafka
    networks:
      - microservices-net

  # Notification Service (Node.js)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - NODE_ENV=development
      - PORT=3002
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3002:3002"
    depends_on:
      - redis
      - kafka
    volumes:
      - ./notification-service:/app
      - /app/node_modules
    networks:
      - microservices-net

  # Databases
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - microservices-net

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orders
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  # Cache and messaging
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-net

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - "9092:9092"
    networks:
      - microservices-net

  # Monitoring and tracing
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3030:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - microservices-net

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI
      - "14268:14268"
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  mongo-data:
  postgres-data:
  grafana-data: 